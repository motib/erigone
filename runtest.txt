
C:\erigone>set EDIR=test 

C:\erigone>src\erigone -r  test\array 
20 20 20 20 20 20 20 20 20 20 
9 8 7 6 5 4 3 2 1 0 
simulation terminated=valid end state,line=17,statement={else   -> printf("\n"); break},

C:\erigone>src\erigone -r  test\mergesort 
 1
 3
 4
 5
 7
 8
 12
simulation terminated=valid end state,line=59,statement={printf(" %d\n", result[8-1])},

C:\erigone>src\erigone -r  test\data1 
200 8195 4194311
200 7995 67158025
201 7994 67158026
simulation terminated=valid end state,line=15,statement={printf("%d %d %d\n", t, s, i)},

C:\erigone>src\erigone -r  test\data2 
1 6 7 5
301 311 612 303
100001 100002 200003 100005
simulation terminated=valid end state,line=24,statement={printf("%d %d %d %d\n", c[0], c[1], c[2], c[3])},

C:\erigone>src\erigone -r  test\data3 
1 2 3
301 302 303
100001 100002 100003
1 301 100001
2 302 100002
3 303 100003
1 302 100003
simulation terminated=valid end state,line=33,statement={printf("%d %d %d\n", x, y, z)},

C:\erigone>src\erigone -r  test\data4 
3 4 7
3 4 5
OK
OK
OK
129 126 255
15 9 9
15 9 6
15 120 3
simulation terminated=valid end state,line=49,statement={printf("%d %d %d\n", a, b, c)},

C:\erigone>src\erigone -r  test\data5 
200 8195 4194311
100 4097 2097155
simulation terminated=valid end state,line=15,statement={printf("%d %d %d\n", t1, s1, i1)},

C:\erigone>src\erigone -s  test\simple 
verification terminated=assert statement is false,line=19,statement={assert (n == 2)},

C:\erigone>src\erigone -s  test\simpleactive 
verification terminated=assert statement is false,line=13,statement={assert (n > 2)},

C:\erigone>src\erigone -s -lt700  test\count 
verification terminated=assert statement is false,line=30,statement={assert (n > 2)},

C:\erigone>src\erigone -s -lt700  test\count-run 
verification terminated=assert statement is false,line=22,statement={assert (n > 2)},

C:\erigone>src\erigone -s  test\queens 
verification terminated=assert statement is false,line=36,statement={assert(false)},

C:\erigone>src\erigone -g  test\queens 
8, 4, 1, 3, 6, 2, 7, 5, 
8, 4, 1, 3, 6, 2, 7, 5, 
simulation terminated=assert statement is false,line=36,statement={assert(false)},

C:\erigone>src\erigone -s  test\queens4 
verification terminated=assert statement is false,line=37,statement={assert(false)},

C:\erigone>src\erigone -g  test\queens4 
 3 1 4 2
simulation terminated=assert statement is false,line=37,statement={assert(false)},

C:\erigone>src\erigone -s  test\sat 
verification terminated=assert statement is false,line=16,statement={assert(!result)},

C:\erigone>src\erigone -s -lt20  test\sat3 
verification terminated=successfully,

C:\erigone>src\erigone -s  test\fa 
verification terminated=assert statement is false,line=59,statement={assert(false)},

C:\erigone>src\erigone -s  test\second-assert 
verification terminated=assert statement is false,line=22,statement={assert (critical == 1)},

C:\erigone>src\erigone -s  test\third-assert 
verification terminated=invalid end state,line=7,statement={wantp = true},

C:\erigone>src\erigone -s  test\dekker-assert 
verification terminated=successfully,

C:\erigone>src\erigone -s  test\sem-assert 
verification terminated=successfully,

C:\erigone>src\erigone -s  test\sem3 
verification terminated=successfully,

C:\erigone>src\erigone -s -t  test\second-mutex 
verification terminated=never claim terminated,line=11,statement={csp = false},

C:\erigone>src\erigone -s -t  test\second-ltl 
message=Unnamed internal LTL specification not found,
message=Looking for file "test\second-ltl.prp",
exception=global.file_error,
message=LTL file not found "test\second-ltl.prp",

C:\erigone>src\erigone -s -t  test\second-rr 
verification terminated=never claim terminated,line=10,statement={csp:wantp = false},

C:\erigone>src\erigone -s -t  test\second-def 
verification terminated=never claim terminated,line=13,statement={critical--},

C:\erigone>src\erigone -s -t  test\dekker-mutex 
verification terminated=successfully,

C:\erigone>src\erigone -s -t-mutex  test\dekker-ltl 
verification terminated=successfully,

C:\erigone>src\erigone -s -t  test\sem-mutex 
verification terminated=successfully,

C:\erigone>src\erigone -s -t-mutex  test\sem-ltl 
verification terminated=successfully,

C:\erigone>src\erigone -f -t-liveness  test\sem-ltl 
verification terminated=acceptance cycle,line=25,statement={sem--},

C:\erigone>src\erigone -f -t  test\fourth-live 
verification terminated=acceptance cycle,line=11,statement={wantP = true},

C:\erigone>src\erigone -f -t  test\fourth-live 
verification terminated=acceptance cycle,line=11,statement={wantP = true},

C:\erigone>src\erigone -a -t  test\dekker-live1 
verification terminated=acceptance cycle,line=35,statement={(turn == 2)},

C:\erigone>src\erigone -a -t  test\dekker-live2 
verification terminated=acceptance cycle,line=35,statement={(turn == 2)},

C:\erigone>src\erigone -f -t  test\dekker-live1 
verification terminated=successfully,

C:\erigone>src\erigone -f -t -lt40  test\dekker-live2 
verification terminated=successfully,

C:\erigone>src\erigone -a -t  test\fair1 
verification terminated=acceptance cycle,line=9,statement={else -> n = 1 - n},

C:\erigone>src\erigone -f -t  test\fair1 
verification terminated=successfully,

C:\erigone>src\erigone -a -t  test\fair2 
verification terminated=acceptance cycle,line=15,statement={flag = true},

C:\erigone>src\erigone -f -t  test\fair2 
verification terminated=acceptance cycle,line=8,statement={else -> true},

C:\erigone>src\erigone -f -t  test\fair3 
verification terminated=successfully,

C:\erigone>src\erigone -f -t  test\fair4 
verification terminated=acceptance cycle,line=8,statement={else -> true},

C:\erigone>src\erigone -r     test\ch-fifo 
1 2 3
4 5 6
7 8 9
10 11 12
simulation terminated=valid end state,line=20,statement={printf("%d %d %d\n", a, b, c)},

C:\erigone>src\erigone -r     test\ch-sorted 
4 5 6
7 8 8
7 8 9
7 8 9
1 2 3
20 21 22
simulation terminated=valid end state,line=22,statement={printf("%d %d %d\n", a, b, c)},

C:\erigone>src\erigone -r     test\ch-match 
1 2 3
5 6
7 8
simulation terminated=invalid end state,line=18,statement={printf("%d %d\n", a, b)},

C:\erigone>src\erigone -r     test\ch-random 
5 6
10 11
8
simulation terminated=valid end state,line=19,statement={printf("%d\n", b)},

C:\erigone>src\erigone -r     test\ch-poll 
1 _ _
_ 8 _
simulation terminated=valid end state,line=12,statement={ch1 ?? [a, 8, c] -> printf("_ 8 _\n")},

C:\erigone>src\erigone -r     test\ch-expr 
len=0,empty=1,nempty=0,full=0,nfull=1,
len=1,empty=0,nempty=1,full=0,nfull=1,
len=2,empty=0,nempty=1,full=0,nfull=1,
len=3,empty=0,nempty=1,full=1,nfull=0,
len=2,empty=0,nempty=1,full=0,nfull=1,
len=1,empty=0,nempty=1,full=0,nfull=1,
len=0,empty=1,nempty=0,full=0,nfull=1,
simulation terminated=valid end state,line=23,statement={printf("len=%d,empty=%d,nempty=%d,full=%d,nfull=%d,\n",},

C:\erigone>src\erigone -r     test\ch-array 
1 2 3
7 8 9
4 5 6
10 11 12
16 17 18
13 14 15
simulation terminated=valid end state,line=28,statement={printf("%d %d %d\n", a, b, c)},

C:\erigone>src\erigone -r     test\ch-array1 
1 2 
3 4
5 6
7 8 
9 10
simulation terminated=valid end state,line=21,statement={printf("%d %d\n", a, b)},

C:\erigone>src\erigone -r     test\mtype 
ack reply request
ack 10 11
reply 8 9
request 2 3
request 2 3
reply 4 5
ack 6 7
simulation terminated=valid end state,line=31,statement={printf("%e %d %d\n", a, b, c)},

C:\erigone>src\erigone -r     test\mtype1 
mtype=request1,value=2
mtype=request2,value=1
mtype=reply1,value=6
mtype=reply2,value=5
mtype=ack,value=4
mtype=nack,value=3
simulation terminated=valid end state,line=10,statement={printf("mtype=%e,value=%d\n", nack,     nack)},

C:\erigone>src\erigone -r     test\anon 
1 2 3
4 2 6
simulation terminated=valid end state,line=14,statement={printf("%d %d %d\n", a, b, c)},

C:\erigone>src\erigone -r     test\end 
number of processes=4
number of processes=3
simulation terminated=valid end state,line=31,statement={printf("number of processes=%d\n", _nr_pr)},

C:\erigone>src\erigone -r     test\nrpr 
before pid is 2, nrpr is 3
pid is 0, nrpr is 3
pid is 1, nrpr is 2
after pid is 2, nrpr is 1
simulation terminated=valid end state,line=17,statement={printf("after pid is %d, nrpr is %d\n", _pid, _nr_pr)},

C:\erigone>src\erigone -r     test\pid 
0 init proc
1 is in p's critical section
2 is in q's critical section
3 is in p's critical section
4 is in q's critical section
5 is in q's critical section
simulation terminated=valid end state,line=12,statement={procs++},

C:\erigone>src\erigone -r     test\proctest 
6 5 9
6 6 36
6 5 9
6 7 42
6 5 9
6 8 48
simulation terminated=valid end state,line=13,statement={proc++},

C:\erigone>src\erigone -r     test\run 
0 init
1 is in p x=2, y=3
2 is in q x=5, y=4
3 is in p x=6, y=7
4 is in q x=9, y=8
simulation terminated=valid end state,line=12,statement={sync++},

C:\erigone>src\erigone -s     test\peterson1 
verification terminated=successfully,

C:\erigone>src\erigone -t -a  test\peterson2 
verification terminated=acceptance cycle,line=11,statement={last = self},

C:\erigone>src\erigone -t -f  test\peterson2 
verification terminated=successfully,

C:\erigone>src\erigone -t -a  test\peterson3 
verification terminated=acceptance cycle,line=19,statement={aktiv[self] = 0},

C:\erigone>src\erigone -t -f  test\peterson3 
verification terminated=successfully,

C:\erigone>src\erigone -t -a  test\stepper 
verification terminated=acceptance cycle,line=14,statement={x = 3},

C:\erigone>src\erigone -t -f  test\stepper 
verification terminated=acceptance cycle,line=12,statement={x = x + 1},
